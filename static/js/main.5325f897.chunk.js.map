{"version":3,"sources":["landing_img.svg","ClientComponent/getWeather.ts","DisplayWeatherCard/DisplayWeatherCard.tsx","QueryField/QueryField.tsx","Layout/Layout.tsx","Header/Header.tsx","ClientComponent/ClientComponent.tsx","LandingComponent/LandingComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","getWeather","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","data","fetchData","returnData","wrap","_context","prev","next","fetch","concat","cityName","sent","status","Error","json","abrupt","lon","coord","lat","temp","main","description","weather","pressure","humidity","wind","speed","stop","_x","apply","this","arguments","CardAnim","keyframes","_templateObject","Card","styled","div","_templateObject2","DsiplayWeatherCard","props","react_default","createElement","QueryArea","QueryField_templateObject","QueryField","onChange","e","inputChangeEventListener","target","value","placeholder","onClick","buttonEventListener","LayoutContainer","Layout_templateObject","Layout","children","HeaderContainer","header","Header_templateObject","Header","ClientComponent","_useState","useState","_useState2","slicedToArray","setCityName","_useState3","_useState4","weatherData","setWeatherData","src_Layout_Layout","src_Header_Header","src_QueryField_QueryField","then","item","DisplayWeatherCard","HeroTitle","h1","LandingComponent_templateObject","Footer","footer","LandingComponent_templateObject2","LandingGraphic","img","_templateObject3","LandingDescription","_templateObject4","ToAppButton","Link","_templateObject5","LandingComponent","src","graphic","to","process","App","react_router_dom","lib","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sOC2BzBC,EApBC,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACOC,MAAK,qDAAAC,OAAsDR,EAAKS,SAA3D,kEADZ,UAEU,OADrBR,EADWG,EAAAM,MAEDC,OAFC,CAAAP,EAAAE,KAAA,cAGL,IAAIM,MAAM,2BAHL,cAAAR,EAAAE,KAAA,EAMYL,EAAUY,OANtB,cAMPX,EANOE,EAAAM,KAAAN,EAAAU,OAAA,SAOJ,CACHC,IAAKb,EAAWc,MAAMD,IACtBE,IAAKf,EAAWc,MAAMC,IACtBC,KAAMhB,EAAWiB,KAAKD,KACtBE,YAAalB,EAAWmB,QAAQ,GAAGD,YACnCE,SAAUpB,EAAWiB,KAAKG,SAC1BC,SAAUrB,EAAWiB,KAAKI,SAC1BC,KAAMtB,EAAWsB,KAAKC,QAdf,yBAAArB,EAAAsB,SAAA3B,MAAH,gBAAA4B,GAAA,OAAAlC,EAAAmC,MAAAC,KAAAC,YAAA,ywBCLhB,IAAMC,EAAWC,oBAAHC,KASRC,EAAOC,UAAOC,IAAVC,IAWON,GA8BFO,EAfY,SAACC,GAExB,OACQC,EAAA3C,EAAA4C,cAACP,EAAD,KACIM,EAAA3C,EAAA4C,cAAA,wBAAgBF,EAAM9B,UACtB+B,EAAA3C,EAAA4C,cAAA,yBAAiBF,EAAMvC,KAAKkB,KAA5B,SACAsB,EAAA3C,EAAA4C,cAAA,SAAIF,EAAMvC,KAAKoB,aACfoB,EAAA3C,EAAA4C,cAAA,4BAAeF,EAAMvC,KAAKsB,SAA1B,QACAkB,EAAA3C,EAAA4C,cAAA,kCAAgBF,EAAMvC,KAAKuB,SAA3B,KACAiB,EAAA3C,EAAA4C,cAAA,4CAAqBF,EAAMvC,KAAKwB,KAAhC,qpCC1ChB,IAAMkB,EAAYP,UAAOC,IAAVO,KAqDAC,EAXI,SAACL,GAEhB,OACQC,EAAA3C,EAAA4C,cAACC,EAAD,KACIF,EAAA3C,EAAA4C,cAAA,SAAOI,SAAU,SAACC,GAAD,OAAOP,EAAMQ,yBAAyBD,EAAEE,OAAOC,QAAQC,YAAY,iBACpFV,EAAA3C,EAAA4C,cAAA,UAAQU,QAASZ,EAAMa,qBAAvB,uZCjDhB,IAAMC,EAAkBlB,UAAOC,IAAVkB,KAsBNC,EAVA,SAAChB,GAEZ,OACQC,EAAA3C,EAAA4C,cAACY,EAAD,KACKd,EAAMiB,gZCfvB,IAAMC,EAAkBtB,UAAOuB,OAAVC,KAuBNC,EARA,WACX,OACIpB,EAAA3C,EAAA4C,cAACgB,EAAD,KACIjB,EAAA3C,EAAA4C,cAAA,yBCOGoB,EAtBS,WAAM,IAAAC,EACMC,mBAAS,UADfC,EAAAtE,OAAAuE,EAAA,EAAAvE,CAAAoE,EAAA,GACnBrD,EADmBuD,EAAA,GACTE,EADSF,EAAA,GAAAG,EAEYJ,mBAAS,CAAChD,IAAK,GAAIE,IAAK,GAAIC,KAAM,EAAGE,YAAa,KAF9DgD,EAAA1E,OAAAuE,EAAA,EAAAvE,CAAAyE,EAAA,GAEnBE,EAFmBD,EAAA,GAENE,EAFMF,EAAA,GAU1B,OACI5B,EAAA3C,EAAA4C,cAAC8B,EAAD,KACQ/B,EAAA3C,EAAA4C,cAAC+B,EAAD,MACAhC,EAAA3C,EAAA4C,cAACgC,EAAD,CAAYrB,oBATD,WACpB5D,EAAW,CAACiB,SAAUA,IAAWiE,KAAK,SAAA1E,GAAI,OAAIsE,EAAetE,MAQH+C,yBANhC,SAAC4B,GAC1BT,EAAYS,MAMiB,KAApBN,EAAYtD,KACTyB,EAAA3C,EAAA4C,cAACmC,EAAD,CAAoBnE,SAAUA,EAAUT,KAAMqE,o0CCflE,IAAMQ,EAAY1C,UAAO2C,GAAVC,KAQTC,EAAS7C,UAAO8C,OAAVC,KAONC,EAAiBhD,UAAOiD,IAAVC,KAOdC,EAAqBnD,UAAO5C,EAAVgG,KAUlBC,EAAcrD,kBAAOsD,IAAPtD,CAAHuD,KAmCFC,EAbU,WACrB,OACInD,EAAA3C,EAAA4C,cAAC8B,EAAD,KACI/B,EAAA3C,EAAA4C,cAAC+B,EAAD,MACAhC,EAAA3C,EAAA4C,cAACoC,EAAD,4CACArC,EAAA3C,EAAA4C,cAAC6C,EAAD,oSACA9C,EAAA3C,EAAA4C,cAAC0C,EAAD,CAAgBS,IAAKC,MACrBrD,EAAA3C,EAAA4C,cAAC+C,EAAD,CAAaM,GAAIC,qBAAjB,6BACAvD,EAAA3C,EAAA4C,cAACuC,EAAD,YCnDGgB,EAVH,WACV,OACExD,EAAA3C,EAAA4C,cAACwD,EAAA,EAAD,KACEzD,EAAA3C,EAAA4C,cAACyD,EAAA,MAAD,MACA1D,EAAA3C,EAAA4C,cAAC0D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAMN,cAA8BO,UAAWX,IAC5DnD,EAAA3C,EAAA4C,cAAC0D,EAAA,EAAD,CAAOE,KAAMN,oBAAoCO,UAAWzC,MCA9C0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrE,EAAA3C,EAAA4C,cAACqE,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.5325f897.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/landing_img.26c57035.svg\";","interface GetWeatherInterface{\n    cityName: string,\n    cityId?: string,\n    cityCountry?: string\n\n}\n\nconst getWeather = async (data: GetWeatherInterface) => {\n    let fetchData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${data.cityName}&APIKEY=8004ec5d469862255ead99a28fafbe12&units=metric&lang=pl`);\n    if (fetchData.status !== 200){\n        throw new Error('cannot fetch this city!');\n    }\n    else {\n        let returnData = await fetchData.json();\n        return {\n            lon: returnData.coord.lon,\n            lat: returnData.coord.lat,\n            temp: returnData.main.temp,\n            description: returnData.weather[0].description,\n            pressure: returnData.main.pressure,\n            humidity: returnData.main.humidity,\n            wind: returnData.wind.speed,\n        \n        };\n    }\n}\n\nexport default getWeather;","import React from 'react';\nimport styled , { keyframes } from 'styled-components';\nconst CardAnim = keyframes`\nfrom {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n\n  }\n`\nconst Card = styled.div`\n    font-family: Roboto;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content:center;\n    grid-row: 7/14;\n    grid-column: 5/9;\n    background-color:  #fff;\n    border: 2px solid  #0D68F1;\n    border-radius: 10px;\n    animation: ${CardAnim} 1s  linear;\n    position: relative;\n    color: #0D68F1;\n    & h3{\n        position: absolute;\n        font-weight: 800;\n        top: 20px;\n        font-size: 3em;\n    }\n    & p{\n        font-size: 2em;\n        text-align: left;\n        line-height: 1.5;\n    }\n`\nconst DsiplayWeatherCard = (props:any) => {\n    \n    return(\n            <Card>\n                <h3>Pogoda dla {props.cityName}</h3>\n                <p>Temperatura: {props.data.temp}°C</p>\n                <p>{props.data.description}</p>\n                <p>Ciśnienie: {props.data.pressure} hPa</p>\n                <p>Wilgotność: {props.data.humidity}%</p>\n                <p>Prędkość wiatru: {props.data.wind} m/s</p>\n            </Card>\n    )\n \n}\n\nexport default DsiplayWeatherCard;","import React from 'react';\nimport styled from 'styled-components';\n\n\nconst QueryArea = styled.div`\n    grid-column: 5/9;\n    grid-row: 4;\n    display: flex;\n    justify-content: center;\n\n    align-items: center;\n    & input{\n        width: 80%;\n        height: 100%;\n        border: none;\n        border-top-left-radius: 10px ;\n        border-bottom-left-radius: 10px ;\n        border: 2px solid #0D68F1;\n        padding: 10px;\n        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.4);\n        box-sizing:  border-box;\n        font-size: 1.5em;\n        color: #0D68F1;\n        border-right:none;\n        font-weight: 700;\n    }\n    & button {\n        width: 20%;\n        height: 100%;\n        border: none;\n        border: 1px solid #0D68F1;\n        border-top-right-radius: 10px ;\n        border-bottom-right-radius: 10px ;\n        color: white;\n        font-weight: 700;\n        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.4);\n        background-color:  #0D68F1;\n        transition-duration: 0.5s;\n    }\n    & button:hover{\n        color: #0D68F1;\n        background-color: white;\n        cursor: pointer;\n\n    }\n`\nconst QueryField = (props:any) => {\n    \n    return(\n            <QueryArea>\n                <input onChange={(e) => props.inputChangeEventListener(e.target.value)} placeholder=\"Podaj miasto\"/>\n                <button onClick={props.buttonEventListener}>Sprawdź pogodę</button>\n            </QueryArea>\n    )\n \n}\n\nexport default QueryField;","import React from 'react';\nimport styled from 'styled-components';\nconst LayoutContainer = styled.div`\n    @import url('https://fonts.googleapis.com/css?family=Pacifico|Roboto&display=swap');\n    width:100vw;\n    max-width: 100%;\n    font-size: 10px;\n    height: auto;\n    min-height: 100vh;\n    display: grid;\n    grid-template-columns: repeat(12,1fr);\n    grid-auto-rows: 5vh;\n    grid-gap: 20px;\n`\nconst Layout = (props:any) => {\n    \n    return(\n            <LayoutContainer>\n                {props.children}\n            </LayoutContainer>\n    )\n \n}\n\nexport default Layout;","import React from 'react'\nimport styled from 'styled-components';\n\nconst HeaderContainer = styled.header`\n    grid-column: 1/13;\n    grid-row: 1;\n    height: 7vh;\n    background-color :white;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    & h1{\n        color: #0D68F1;\n        font-family: Pacifico;\n        font-size: 2.7em;\n    }\n`\nconst Header = () => {\n    return(\n        <HeaderContainer>\n            <h1>Pogodynka</h1>\n        </HeaderContainer>\n    )\n}\n\nexport default Header;","import React, {useState, useEffect} from 'react';\nimport getWeather from './getWeather'\nimport DisplayWeatherCard from '../DisplayWeatherCard/DisplayWeatherCard'\nimport QueryField from '../QueryField/QueryField'\nimport Layout from '../Layout/Layout';\nimport Header from '../Header/Header';\nconst ClientComponent = () => {\n    const [cityName, setCityName] = useState(\"Krosno\");\n    const [weatherData, setWeatherData] = useState({lon: '', lat: '', temp: 0, description: ''});\n\n    const getWeatherData = () => {\n       getWeather({cityName: cityName}).then(data => setWeatherData(data));\n    }\n    const handleTextInputEvent = (item:string) => {\n        setCityName(item);\n    }\n    return(\n        <Layout>\n                <Header/>\n                <QueryField buttonEventListener={getWeatherData} inputChangeEventListener={handleTextInputEvent}/>\n                {weatherData.lon !== '' && \n                    <DisplayWeatherCard cityName={cityName} data={weatherData}/>\n                }\n        </Layout>\n    )\n \n}\n\nexport default ClientComponent;","import React from 'react';\nimport Header from '../Header/Header';\nimport Layout from '../Layout/Layout';\nimport styled from 'styled-components';\nimport graphic from '../landing_img.svg';\nimport { Link } from 'react-router-dom';\nconst HeroTitle = styled.h1`\n    font-family: Roboto;\n    grid-column: 2/5;\n    grid-row: 4;\n    font-size: 3.6em;\n    color: #0D68F1;\n    font-weight: 700;\n`\nconst Footer = styled.footer`\n    position: absolute;\n    bottom: 0px;\n    width: 100vw;\n    height: 20vh;\n    background-color: #0D68F1;\n`\nconst LandingGraphic = styled.img`\nposition: absolute;\nbottom: 20vh;\nright: 5vw;\nheight: 60vh;\nwidth: auto;\n`\nconst LandingDescription = styled.p`\nfont-family: Roboto;\ngrid-column: 2/6;\ngrid-row: 6;\nfont-size: 2em;\ncolor: #0D68F1;\nopacity: 0.7;\nfont-weight: 400;\nline-height: 1.5;\n`\nconst ToAppButton = styled(Link)`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 10vw;\n    height: 5vh;\n    background-color: #fff;\n    border: 3px solid #0D68F1;\n    grid-column: 2;\n    border-radius: 10px;\n    grid-row: 9;\n    color: #0D68F1;\n    font-size: 2em;\n    font-family: Roboto;\n    text-decoration: none;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n    transition-duration: 0.5s;\n    &:hover{\n        transform: scale(1.1);\n        cursor: pointer;\n    }\n`\nconst LandingComponent = () => {\n    return(\n        <Layout>\n            <Header></Header>\n            <HeroTitle>Sprawdź pogodę w okolicy!</HeroTitle>\n            <LandingDescription>No ogólnie to kiedyś będzie tutaj jakiś fajny opis. W skrócie Pogodynka to taka aplikacja że sobie sprawdzasz pogodę napisana tylko po to żeby utrwalić pewne skillsy. Dzięki za uwagę. Ps korzystam z Open Weather Api. Ps szukam pracy</LandingDescription>\n            <LandingGraphic src={graphic}/>\n            <ToAppButton to={process.env.PUBLIC_URL + '/client'}>Przejdź do aplikacji</ToAppButton>\n            <Footer>a</Footer>\n        </Layout>\n    )\n}\n\nexport default LandingComponent;","\nimport './App.css';\nimport React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport ClientComponent from './ClientComponent/ClientComponent';\nimport { Reset } from 'styled-reset'\nimport LandingComponent from './LandingComponent/LandingComponent';\nconst App = () => {\n  return(\n    <Router>\n      <Reset/>\n      <Route exact path={process.env.PUBLIC_URL + '/'} component={LandingComponent}/>\n      <Route path={process.env.PUBLIC_URL + '/client'} component={ClientComponent}/>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}